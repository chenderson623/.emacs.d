#+TITLE: Emacs Literate Configuration
#+AUTHOR: Chris Henderson
#+PROPERTY: header-args :tangle yes

* Configuration
:PROPERTIES:
:VISIBILITY: children
:END:

** Table of Contents :TOC_3_gh:
- [[#configuration][Configuration]]
  - [[#about-this-file][About this file]]
  - [[#org-file-tweaks][Org File Tweaks]]
    - [[#automatically-tangle][Automatically Tangle]]
    - [[#visibility-settings][Visibility Settings]]
    - [[#table-of-contents][Table of Contents]]
  - [[#personal-information][Personal Information]]
  - [[#emacs-initialization][Emacs Initialization]]
    - [[#settings][Settings]]
    - [[#package-management][Package Management]]
  - [[#packages][Packages]]
    - [[#evil][Evil]]
    - [[#ivy][Ivy]]
    - [[#counsel][Counsel]]
    - [[#swiper][Swiper]]
    - [[#magit][Magit]]
    - [[#projectile][Projectile]]
    - [[#org][Org]]
    - [[#toc-org][Toc-org]]
  - [[#post-initialization][Post Initialization]]

** Environment

Detect system type

#+BEGIN_SRC emacs-lisp
(defconst *sys/gui*
  (display-graphic-p)
  "Are we running on a GUI Emacs?")

(defconst *sys/windows*
  (eq system-type 'windows-nt)
  "Are we running on a WinTel system?")

(defconst *sys/linux*
  (eq system-type 'gnu/linux)
  "Are we running on a GNU/Linux system?")

(defconst *sys/mac*
  (eq system-type 'darwin)
  "Are we running on a Mac system?")

(defconst *sys/root*
  (string-equal "root" (getenv "USER"))
  "Are you a ROOT user?")
#+END_SRC

** User Settings
*** Personal Information
Let's set some variables with basic user information.

#+BEGIN_SRC emacs-lisp
  (setq user-full-name "Chris Henderson"
        user-mail-address "chenderson623@gmail.com")
#+END_SRC

** Config Defaults

*** Paths
**** Path Functions
#+BEGIN_SRC emacs-lisp
  (defun my-dir-in-directory (dirname parentdir)
    (unless (file-directory-p parentdir)
      (user-error "Parent directory `%s' is not a directory." parentdir))

    (let ((newdir (expand-file-name dirname
                                  (file-truename parentdir))))
        (unless (file-directory-p newdir)
          (make-directory newdir t))
        newdir))

  (defun my-dir-in-data-directory (dirname)
      (my-dir-in-directory dirname *paths/data-emacs*))
#+END_SRC

**** Path Variables

this is built in: (defvar user-emacs-directory "~/.emacs.d/"

#+BEGIN_SRC emacs-lisp
  (defvar *paths/user-home* (getenv "HOME"))

  ;; Base Directories. These can all be overridden earlier
;;  (defvar *paths/data-home* (expand-file-name ".local/share" *paths/user-home*)
;;    "The top directory for third-party shares")
  ;; TODO test this
  (defvar *paths/data-home* (my-dir-in-directory ".local/share" *paths/user-home*)
    "The top directory for third-party shares")
  (defvar *paths/cache-home* (expand-file-name ".cache" *paths/user-home*)
    "The top directory for user cache")
  (defvar *paths/config-home* (expand-file-name ".config" *paths/user-home*)
    "The top directory for user configs")

  ;; Calculated Directories. These can all be overridden earlier
  (defvar *paths/data-emacs* (my-dir-in-directory "emacs" *paths/data-home*)
    "The top directory for third-party shares")

  (defvar *paths/cache-emacs* (expand-file-name "emacs" *paths/cache-home*)
    "Directory for cache files")

  (defvar *paths/personal-data* (my-dir-in-directory ".personal" "~")
    "Directory to store personal data")

  (defvar *paths/elpa-path* (my-dir-in-data-directory (format "elpa-%d.%d"
                                                        emacs-major-version
                                                        emacs-minor-version))
    "The directory to store third party packages from ELPA.")

  (defvar *paths/lib-path* (my-dir-in-data-directory "lib")
    "The directory to store third party packages not from ELPA.")

  (defvar *paths/third-party-bin* (my-dir-in-data-directory "opt")
    "The directory to store third party binary tools.")

  ;; user-emacs subdirectories

  (defvar *paths/emacs-user-config-files-path* (expand-file-name "config" user-emacs-directory)
    "The directory to store misc config files.")

  (defvar *paths/emacs-user-lisp-files-path* (expand-file-name "lisp" user-emacs-directory)
    "The directory to store custom packages.")

  (defvar *paths/emacs-user-packages-path* (expand-file-name "package" user-emacs-directory)
    "The directory to store user packages.")

#+END_SRC

** Core Emacs
*** byte compiling
Disable certain byte compiler warnings to cut down on the noise. This is a personal choice and can be removed
if you would like to see any and all byte compiler warnings.

#+BEGIN_SRC emacs-lisp
  (setq byte-compile-warnings '(not free-vars unresolved noruntime lexical make-local))
#+END_SRC

*** startup hooks
method to test best-possible startup time:
emacs -q --eval='(message "%s" (emacs-init-time))'
Use a hook so the message doesn't get clobbered by other messages.
#+BEGIN_SRC emacs-lisp
  (add-hook 'emacs-startup-hook
            (lambda ()
              (message "Emacs ready in %s with %d garbage collections."
                      (format "%.2f seconds"
                              (float-time
                                (time-subtract after-init-time before-init-time)))
                      gcs-done)))
#+END_SRC

*** editor
#+begin_src emacs-lisp
;; auto revert mode
(global-auto-revert-mode 1)
(add-hook 'dired-mode-hook 'auto-revert-mode)
#+end_src

**** spell check
#+begin_src emacs-lisp
(defvar ispell-program-name (or (executable-find "ispell")
                               (executable-find "aspell")
                               (executable-find "hunspell")))

(when (equal system-type 'windows-nt)
 (setenv "LANG" "en_US.utf8"))

(when ispell-program-name
  (add-hook 'prog-mode-hook #'flyspell-prog-mode))

(setq flyspell-prog-text-faces '(font-lock-comment-face font-lock-doc-face))

(setq flyspell-use-meta-tab nil)
(add-hook 'dired-mode-hook 'auto-revert-mode)
#+end_src

**** recent files
#+begin_src emacs-lisp
(recentf-mode 1)
(setq recentf-max-menu-items 25)
(setq recentf-max-saved-items 25)
(global-set-key "\C-x\ \C-r" 'recentf-open-files)
#+end_src

*** dired
#+begin_src emacs-lisp
;; auto refresh dired when file changes
(add-hook 'dired-mode-hook 'auto-revert-mode)
(add-hook 'dired-mode-hook 'auto-revert-mode)
#+end_src

** Package Management
*** bootstrap Straight
[[https://github.com/raxod502/straight.el][Straight.el]] is a next-generation, purely functional package manager for the Emacs
hacker.
#+begin_src emacs-lisp
  (eval-and-compile
    (defvar bootstrap-version)
    (let ((bootstrap-file
          (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
          (bootstrap-version 5))
      (unless (file-exists-p bootstrap-file)
        (with-current-buffer
            (url-retrieve-synchronously
            "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
            'silent 'inhibit-cookies)
          (goto-char (point-max))
          (eval-print-last-sexp)))
      (load bootstrap-file nil 'nomessage)))    
#+end_src

*** package settings
We're going to set the =load-path= ourselves and avoid calling =(package-initilize)= (for
performance reasons) so we need to set =package--init-file-ensured= to true to tell =package.el=
to not automatically call it on our behalf. Additionally we're setting
=package-enable-at-startup= to nil so that packages will not automatically be loaded for us since
=use-package= will be handling that.

#+BEGIN_SRC emacs-lisp
  (eval-and-compile
    (setq load-prefer-newer t
          package-user-dir "~/.emacs.d/straight/build"
          package--init-file-ensured t
          package-enable-at-startup nil)

    (unless (file-directory-p package-user-dir)
      (make-directory package-user-dir t)))
#+END_SRC

**** manually set load path
We're going to set the load path ourselves so that we don't have to call =package-initialize= at
runtime and incur a large performance hit. This load-path will actually be faster than the one
created by =package-initialize= because it appends the elpa packages to the end of the load path.
Otherwise any time a builtin package was required it would have to search all of third party paths
first.

#+BEGIN_SRC emacs-lisp
  (eval-and-compile
    (setq load-path (append load-path (directory-files package-user-dir t "^[^.]" t))))
#+END_SRC

*** Use-Package settings
Tell =use-package= to always defer loading packages unless explicitly told otherwise. This speeds up
initialization significantly as many packages are only loaded later when they are explicitly used.

#+BEGIN_SRC emacs-lisp
  (setq use-package-always-defer t
        use-package-verbose t)
#+END_SRC

*** Straight - integration with use-package

#+begin_src emacs-lisp
  (eval-and-compile
    (setq straight-use-package-by-default t)
    (straight-use-package 'use-package)
    (use-package bind-key)
    (use-package git))
#+end_src

** Packages

*** which-key
https://github.com/justbur/emacs-which-key
#+begin_src emacs-lisp
(use-package which-key
  :init
  (which-key-mode)
  :config
  (which-key-setup-side-window-right-bottom)
  (setq which-key-sort-order 'which-key-key-order-alpha
    which-key-side-window-max-width 0.33
    which-key-idle-delay 0.05)
  :diminish which-key-mode)
#+end_src

*** ivy
#+begin_src emacs-lisp

(use-package ivy
  :diminish (ivy-mode . "")
  :config
  (setq ivy-use-virtual-buffers t)
  (setq ivy-height 20)
  (setq ivy-count-format "%d/%d "))

  (use-package swiper
    :bind (("C-s" . swiper-isearch)
           ("C-r" . swiper-backward)
           ("M-%" . anzu-query-replace))
    )

(use-package counsel
  :bind* ; load when pressed
  (
    ("M-x"     . counsel-M-x)
    ("C-s"     . swiper)
;   ("C-x C-f" . counsel-find-file)
;   ("C-x C-r" . counsel-recentf)  ; search for recently edited
    ("C-x r l" . counsel-bookmark)
    ("C-x y" . counsel-yank-pop)
;   ("C-c g"   . counsel-git)      ; search for files in git repo
;   ("C-c j"   . counsel-git-grep) ; search for regexp in git repo
;   ("C-x l"   . counsel-locate)
;   ("C-x C-f" . counsel-find-file)
    ("C-h b" . counsel-descbinds)
    ("C-c k" . counsel-ag)
    ("C-c n" . counsel-fzf)
   ("C-h f" . counsel-apropos)
   ("<f1> f"  . counsel-describe-function)
   ("<f1> v"  . counsel-describe-variable)
   ("<f1> l"  . counsel-find-library)
;   ("<f2> i"  . counsel-info-lookup-symbol)
;   ("<f2> u"  . counsel-unicode-char)
   ("C-c C-r" . ivy-resume)))     ; Resume last Ivy-based completion

  (use-package ivy-hydra)
#+end_src

*** helm
#+begin_src emacs-lisp
(use-package helm
  :demand t
  :bind
  (("C-h SPC" . helm-all-mark-rings)
   ;("M-x"     . helm-M-x)
   ("C-x C-m" . helm-M-x)
   ("M-y"     . helm-show-kill-ring)
   ("C-x b"   . helm-mini)
   ("C-x C-b" . helm-buffers-list)
   ("C-x C-f" . helm-find-files)
   ("C-h f"   . helm-apropos)
   ("C-h r"   . helm-info-emacs)
   ("C-h C-l" . helm-locate-library)
   :map helm-map
   ("<tab>"   . helm-execute-persistent-action)
   ("C-i"     . helm-execute-persistent-action)
   ("C-z"     . helm-select-action)
   :map minibuffer-local-map
   ("C-c C-l" . helm-minibuffer-history))
  :bind*
  (("C-r"     . helm-resume))
  :init
  (setq helm-command-prefix-key "C-c h")
  (require 'helm-config)
  :config
  (helm-mode 1)
  ;; Fuzzy matching everywhere
  (setq helm-completion-style 'emacs
        completion-styles     '(flex))
  (setq
   ;; Autoresize helm buffer depending on match count
   helm-M-x-fuzzy-match t
   helm-autoresize-max-height 0
   helm-autoresize-min-height 40
   helm-buffers-fuzzy-matching t
   helm-candidate-number-limit 50
   helm-case-fold-search 'smart
   helm-completion-in-region-fuzzy-match t
   helm-ff-file-name-history-use-recentf t
   helm-ff-newfile-prompt-p nil
   helm-ff-search-library-in-sexp t
   helm-ff-transformer-show-only-basename nil
   helm-imenu-fuzzy-match t
   helm-locate-fuzzy-match nil
   helm-move-to-line-cycle-in-source t
   helm-recentf-fuzzy-match t
   helm-semantic-fuzzy-match t
   helm-split-window-inside-p t)
  (helm-autoresize-mode 1))
#+end_src

** Theme

#+begin_src emacs-lisp
(use-package solarized-theme
  :ensure t
  :if (display-graphic-p)
  :demand t
  :init
  ;; don't make the fringe stand out from the background
  (setq solarized-distinct-fringe-background nil)
  ;; change the font for some headings and titles
  (setq solarized-use-variable-pitch t)
  ;; make the modeline high contrast
  (setq solarized-high-contrast-mode-line nil)
  ;; use this setting without hi contrast modeline
  (setq x-underline-at-descent-line t)
  ;; Use bolding
  (setq solarized-use-less-bold nil)
  ;; Use more italics
  (setq solarized-use-more-italic t)
  ;; Use colors for indicators such as git:gutter, flycheck and similar
  (setq solarized-emphasize-indicators t)
  ;; Set to nil of you don't want to change size of org-mode headlines (but keep other size-changes)
  (setq solarized-scale-org-headlines t)
  :config
  (load-theme 'solarized-light t))

;;;; Customized Solarized Faces
;;;;;   Solarized Dark
(defun my/solarized-dark ()
  "My customized solarized dark theme"
  ;; for issues with emacs 27 see https://emacs.stackexchange.com/a/52804/11934
  ;; (let ((custom--inhibit-theme-enable nil))
  (interactive)
  (mapc #'disable-theme custom-enabled-themes) ; clear any existing themes
  (load-theme 'solarized-dark t)
  (custom-theme-set-faces
   'solarized-dark

   ;; make bg darker for higher contrast & foreground slightly lighter
   `(default ((t (:foreground "#8f9ea0" :background "#002833"))))

   ;; matching fringe
   `(fringe ((t (:background "#002833" :foreground "#586e75"))))

   ;; fix modeline underline
   `(mode-line ((t (:background "#073642" :foreground "#839496" :box (:line-width 1 :color "#002833" :style unspecified) :overline "#002833" :underline "#002833"))))

   ;; terminal
   `(term ((t (:background "#002833" :foreground "#839496"))))

   ;; org faces
   `(org-block ((t (:foreground "#2E8B57"))))
   `(org-block-begin-line ((t (:foreground "#74a8a4" :weight bold :slant normal))))
   `(org-block-end-line ((t (:foreground "#74a8a4" :weight bold :slant normal))))
   `(org-level-1 ((t (:inherit variable-pitch :foreground "#268bd2" :height 1.5))))
   `(org-level-2 ((t (:inherit variable-pitch :foreground "medium sea green" :height 1.3))))
   `(org-level-3 ((t (:inherit variable-pitch :foreground "#cb4b16" :height 1.2))))
   `(org-level-4 ((t (:inherit variable-pitch :foreground "#6c71c4" :height 1.15))))
   `(org-level-8 ((t (:inherit variable-pitch :foreground "#9e1e86" :height 1.1))))
   `(org-quote ((t (:inherit org-block :slant normal :weight normal))))
   `(org-agenda-date ((t (:background "#002833" :foreground "dark cyan" :inverse-video nil :box (:line-width 5 :color "#002833") :overline nil :underline t :slant normal :weight normal :height 1.5 :family "Avenir Next"))))
   `(org-agenda-date-today ((t (:inherit org-agenda-date :background "#268bd2" :foreground "#002833" :inverse-video t :box nil :overline nil :weight bold))))
   `(org-tag ((t (:inherit font-lock-comment-face :weight bold :height 0.9))))

   ;; markdown faces
   `(markdown-comment-face ((t (:weight normal :slant italic :strike-through nil))))
   `(markdown-header-face-1 ((t (:inherit variable-pitch :foreground "#268bd2" :height 1.75))))
   `(markdown-header-face-2 ((t (:inherit variable-pitch :foreground "medium sea green" :height 1.45))))
   `(markdown-header-face-3 ((t (:inherit variable-pitch :foreground "#cb4b16" :height 1.2))))

   ;; ivy faces
   `(ivy-confirm-face ((t (:foreground "#859900"))))
   `(ivy-current-match ((t (:weight bold :foreground "goldenrod1" :background "#1f4a54" :underline nil))))
   `(ivy-match-required-face ((t (:foreground "#dc322f"))))
   `(ivy-minibuffer-match-face-1 ((t (:foreground "#8f9ea0"))))
   `(ivy-minibuffer-match-face-2 ((t (:foreground "goldenrod1"))))
   `(ivy-minibuffer-match-face-3 ((t (:foreground "goldenrod1"))))
   `(ivy-minibuffer-match-face-4 ((t (:foreground "goldenrod1"))))
   `(ivy-remote ((t (:foreground "#268bd2"))))
   `(swiper-line-face ((t (:weight bold :background "#1f4a54" :underline nil))))
   `(swiper-match-face-1 ((t (:foreground "#8f9ea0"))))
   `(swiper-match-face-2 ((t (:foreground "goldenrod1"))))
   `(swiper-match-face-3 ((t (:foreground "goldenrod1"))))
   `(swiper-match-face-4 ((t (:foreground "goldenrod1"))))

   ;; posframe faces
   `(hydra-posframe-face ((t (:background "#073642"))))
   `(ivy-posframe ((t (:background "#073642"))))
   `(which-key-posframe ((t (:background "#073642"))))
   `(helm-posframe-face ((t (:background "#073642"))))
   `(frog-menu-posframe-background-face ((t (:background "#073642"))))

   ;; helm faces
   `(helm-selection ((t (:background "#1f4a54" :foreground "goldenrod1" :underline nil))))
   `(helm-match ((t (:foreground "#b58900"))))

   ;; line number highlighting
   `(line-number-current-line ((t (:inherit default :foreground "goldenrod1"))))
   ;; '(nlinum-current-line ((t (:inherit default :foreground "goldenrod1"))))
   `(linum-highlight-face ((t (:inherit default :foreground "goldenrod1"))))
   ;; '(nlinum-hl-face ((t (:inherit default :foreground "goldenrod1"))))

   ;; battery faces
   `(fancy-battery-charging ((t (:foreground "dark blue" :weight bold))))
   `(fancy-battery-critical ((t (:foreground "dark red" :weight bold))))
   `(fancy-battery-discharging ((t (:foreground "dark magenta" :weight bold))))))

;;;;;   Solarized Light
(defun my/solarized-light ()
  "My customized solarized-light theme"
  (interactive)
  (mapc #'disable-theme custom-enabled-themes) ; clear any existing themes
  (load-theme 'solarized-light t)
  ;; for issues with emacs 27 see https://emacs.stackexchange.com/a/52804/11934
  ;; (let ((custom--inhibit-theme-enable nil))
  (custom-theme-set-faces
   'solarized-light
   ;; increase text contrast
   ;; `(default ((t (:background "#fdf6e3" :foreground "#727e80"))))
   `(default ((t (:background "#fdf6e3" :foreground "#667173"))))

   ;; fix modeline underline
   `(mode-line ((t (:background "#eee8d5" :foreground "#657b83" :box (:line-width 1 :color "#fdf6e3" :style unspecified) :overline "#fdf6e3" :underline "#fdf6e3"))))
   ;; org faces
   `(org-block ((t (:foreground "#2E8B57"))))
   `(org-block-begin-line ((t (:foreground "#74a8a4" :weight bold :slant normal))))
   `(org-block-end-line ((t (:foreground "#74a8a4" :weight bold :slant normal))))
   `(org-level-1 ((t (:inherit variable-pitch :foreground "#268bd2" :height 1.3))))
   `(org-level-2 ((t (:inherit variable-pitch :foreground "medium sea green" :height 1.2))))
   `(org-level-3 ((t (:inherit variable-pitch :foreground "#cb4b16" :height 1.15))))
   `(org-level-4 ((t (:inherit variable-pitch :foreground "#6c71c4" :height 1.15))))
   `(org-level-8 ((t (:inherit variable-pitch :foreground "#9e1e86" :height 1.1))))
   `(org-quote ((t (:inherit org-block :slant normal :weight normal))))
   `(org-agenda-date ((t (:background "#fdf6e3" :foreground "dark cyan" :inverse-video nil :box (:line-width 5 :color "#002833") :overline nil :underline t :slant normal :weight normal :height 1.5 :family "Avenir Next"))))
   `(org-agenda-date-today ((t (:inherit org-agenda-date :background "#268bd2" :foreground "#fdf6e3" :inverse-video t :box nil :overline nil :weight bold))))
   `(org-tag ((t (:inherit font-lock-comment-face :weight bold :height 0.9))))

   ;; markdown faces
   `(markdown-comment-face ((t (:weight normal :slant italic :strike-through nil))))
   `(markdown-header-face-1 ((t (:inherit variable-pitch :foreground "#268bd2" :height 1.75))))
   `(markdown-header-face-2 ((t (:inherit variable-pitch :foreground "medium sea green" :height 1.45))))
   `(markdown-header-face-3 ((t (:inherit variable-pitch :foreground "#cb4b16" :height 1.2))))

   ;; ivy faces
   `(ivy-confirm-face ((t (:foreground "#859900"))))
   `(ivy-current-match ((t (:weight bold :foreground "#268bd2" :background "#fdf6e3" :underline nil))))
   `(ivy-match-required-face ((t (:foreground "#dc322f"))))
   `(ivy-minibuffer-match-face-1 ((t (:foreground "#64b5ea"))))
   `(ivy-minibuffer-match-face-2 ((t (:foreground "#64b5ea"))))
   `(ivy-minibuffer-match-face-3 ((t (:foreground "#64b5ea"))))
   `(ivy-minibuffer-match-face-4 ((t (:foreground "#64b5ea"))))
   `(ivy-remote ((t (:foreground "#268bd2"))))
   `(swiper-line-face ((t (:weight bold :background "#fdf6e3" :underline nil))))
   `(swiper-match-face-1 ((t (:foreground "#64b5ea"))))
   `(swiper-match-face-2 ((t (:foreground "#64b5ea"))))
   `(swiper-match-face-3 ((t (:foreground "#64b5ea"))))
   `(swiper-match-face-4 ((t (:foreground "#64b5ea"))))

   ;; posframe faces
   `(hydra-posframe-face ((t (:background "#eee8d5"))))
   `(ivy-posframe ((t (:background "#eee8d5"))))
   `(which-key-posframe ((t (:background "#eee8d5"))))
   `(helm-posframe ((t (:background "#eee8d5"))))
   `(frog-menu-posframe-background-face ((t (:background "#eee8d5"))))

   ;; helm faces
   `(helm-selection ((t (:background "#fdf6e3" :foreground "#268bd2" :underline nil :weight bold))))
   `(helm-match ((t (:foreground "#cb4b16" :weight bold))))

   ;; '(helm-selection ((t (:foreground "#f7f438" :background "#64b5ea" :underline nil :weight bold))))
   ;; line size
   `(set-face-attribute 'linum nil :inherit 'fixed-pitch)
   ;; line highlighting
   `(linum-highlight-face ((t (:inherit default :foreground "#002b36"))))
   ;; '(nlinum-hl-face ((t (:inherit default :foreground "#002b36"))))
   `(line-number-current-line ((t (:inherit default :foreground "#002b36"))))
   ;; '(nlinum-current-line ((t (:inherit default :foreground "#002b36"))))
   ;; battery faces
   `(fancy-battery-charging ((t (:foreground "dark blue" :weight bold))))
   `(fancy-battery-critical ((t (:foreground "dark red" :weight bold))))
   `(fancy-battery-discharging ((t (:foreground "dark magenta" :weight bold))))))
#+end_src

Use solarized light
#+begin_src emacs-lisp
  (my/solarized-light)
#+end_src

** UI
#+begin_src emacs-lisp
;;; Do not show the welcome screen
(setq inhibit-splash-screen t)

;;; Scrolling
(setq auto-window-vscroll nil)
;; the text cursor moves off-screen. Instead, only scroll the minimum amount
;; necessary to show the new line. (A number of 101+ disables re-centering.)
(setq scroll-conservatively 101)

;; Optimize mouse wheel scrolling for smooth-scrolling trackpad use.
;; Trackpads send a lot more scroll events than regular mouse wheels,
;; so the scroll amount and acceleration must be tuned to smooth it out.
(setq
 ;; If the frame contains multiple windows, scroll the one under the cursor
 ;; instead of the one that currently has keyboard focus.
 mouse-wheel-follow-mouse 't
 ;; Completely disable mouse wheel acceleration to avoid speeding away.
 mouse-wheel-progressive-speed nil
 ;; The most important setting of all! Make each scroll-event move 2 lines at
 ;; a time (instead of 5 at default). Simply hold down shift to move twice as
 ;; fast, or hold down control to move 3x as fast. Perfect for trackpads.
 mouse-wheel-scroll-amount '(2 ((shift) . 4) ((control) . 6)))

;;; Fonts
(when (eq system-type 'gnu/linux)
  ;(defvar my-font1 (font-spec :family "InconsolataLGC Nerd Font" :size 13))
  (defvar my-font1 (font-spec :family "Inconsolata" :size 13))
  (defvar my-font2 (font-spec :family "Hasklug Nerd Font" :size 13))
  (defvar my-font3 (font-spec :family "DejaVuSansMono Nerd Font" :size 13))
  (defvar my-font4 (font-spec :family "SauceCodePro Nerd Font" :size 13))
  (defvar my-font5 (font-spec :family "FiraCode Nerd Font" :size 13))
  (defvar my-font6 (font-spec :family "RobotoMono Nerd Font" :size 14))
  (defvar my-ligatures t)
  ;(defvar my-vari-font (font-spec :family "Metropolis Light"))
  ;(defvar my-unicode-font (font-spec :family "Symbola"))
  (set-face-attribute 'default nil :font my-font1)
  ;(set-face-attribute 'variable-pitch nil :font my-vari-font)
  ;(set-fontset-font t 'unicode my-unicode-font nil 'prepend)
  (setq-default line-spacing 0.10)
)

;;; Frames
;;;; Frame formatting
;cjh (setq frame-title-format "\n")
;; (setq frame-title-format '('nil))
(setq frame-title-format
      '((buffer-file-name "%f" "%b")))

;cjh (if (display-graphic-p)
;cjh     (progn
;cjh       ;; start frame of emacs maximized
;cjh       (add-to-list 'initial-frame-alist '(fullscreen . maximized))
;cjh       ;; new frames
;cjh       (setq default-frame-alist
;cjh             '(
;cjh               (top . 25)
;cjh               (left . 275)
;cjh               (width . 106) ;; chars
;cjh               (height . 60) ;; lines
;cjh               ))))

;;;; Frame titlebar
;; Theme transparent titlebar
(when (memq window-system '(mac ns))
  (add-to-list 'default-frame-alist '(ns-appearance . dark))
  (add-to-list 'default-frame-alist '(ns-transparent-titlebar . t)))

;; Fix titlebar titling colors
;; see also https://github.com/d12frosted/homebrew-emacs-plus/issues/55
(use-package ns-auto-titlebar
  :commands ns-auto-titlebar-mode
  :if (eq system-type 'darwin)
  :init (ns-auto-titlebar-mode))

;; no border title
;; (setq default-frame-alist '((undecorated . t)))

;;;; No frame scroll bars
(defun my/disable-scroll-bars (frame)
  "Disable scroll bars on new frames"
  (modify-frame-parameters frame
                           '((vertical-scroll-bars . nil)
                             (horizontal-scroll-bars . nil))))
(add-hook 'after-make-frame-functions 'my/disable-scroll-bars)

;;; Scale Text
(global-set-key (kbd "s-=") 'text-scale-increase)
(global-set-key (kbd "s--") 'text-scale-decrease)
(global-set-key (kbd "s-0") 'text-scale-adjust)

;;; Line Numbers
(use-package display-line-numbers
  :ensure nil
  ;; :hook (markdown-mode prog-mode)
  :commands display-line-numbers-mode
  :init
  (setq-default display-line-numbers-type 'visual))

;;; Highlight
(use-package highlight-numbers
  :defer t
  :commands highlight-numbers-mode
  :init
  (add-hook 'prog-mode-hook #'highlight-numbers-mode))

(use-package hl-todo
  :defer t
  :commands hl-todo-mode
  :init
  ;; (add-hook 'org-mode-hook #'hl-todo-mode)
  (add-hook 'prog-mode-hook #'hl-todo-mode)
  (add-hook 'markdown-mode-hook #'hl-todo-mode))

;;; Icons
(use-package all-the-icons
  :after dashboard)
;;dependency
;cjh (quelpa
;cjh  '(font-lock+ :fetcher wiki))
;cjh (use-package font-lock+
;cjh   :defer 1)
;; icons for dired
(use-package all-the-icons-dired
  :defer t
  :commands all-the-icons-dired-mode
  :init
  (add-hook 'dired-mode-hook 'all-the-icons-dired-mode))

;;; Beacon
(use-package beacon
 :defer 5
 :config
 (beacon-mode 1)
 (add-to-list 'beacon-dont-blink-major-modes 'eshell-mode))

;;; Desktop
;(desktop-save-mode 1)
;(use-package desktop+)

;;; Emoji
; (use-package emojify
;   :commands (emojify-mode emojify-apropos-emoji)
;   ;; :hook ((prog-mode markdown-mode) . emojify-mode)
;   :config
;   (setq emojify-emojis-dir (concat my-etc-dir "emojis")))

#+end_src

** Org

#+begin_src emacs-lisp
;;;; Org Directories
  (setq-default org-directory (expand-file-name "org" *paths/user-home*))
  (setq-default org-default-notes-file (expand-file-name "inbox.org" org-directory))
  (setq-default org-default-capture-file (expand-file-name "refile.org" org-directory))
  (setq-default org-agenda-files (list org-directory))

  (setq org-capture-templates
        ;; Note the ` and , to get concat to evaluate properly
        `(

          ("p" "Protocol"
           entry (file+headline org-default-capture-file "Browser Capture")
           "* %:description :RESEARCH:\n#+BEGIN_QUOTE\n%i\n\n -- %:link %u\n #+END_QUOTE\n\n%?")
          ;("L" "Protocol Link"
          ; entry (file+headline org-default-cpature-file "Browser Capture")
          ; "* %? [[%:link][%:description]] \nCaptured On: %u")
          ("L" "Protocol Link"
           entry (file+headline org-default-capture-file "Browser Capture")
           "* [[%:link][%:description]] :RESEARCH:\n%:link \nCaptured On: %u")

      ))

  ;; Add date to captured items
  (defun add-property-with-date-captured ()
    "Add DATE_CAPTURED property to the current item."
    (interactive)
    (org-set-property "DATE_CAPTURED" (format-time-string "%F %A %r")))

  (add-hook 'org-capture-before-finalize-hook 'add-property-with-date-captured)


(use-package org
  :ensure org-plus-contrib
;;  :pin org ; ensure the newest version from 'org' repository
  :config
  (setq
      ;; appearance
      ; virtual indentation
      org-startup-indented t
      ; indent 4 spaces
      org-indent-indentation-per-level 4

      ; wrap lines
      org-startup-truncated nil
  )
)

;  (setq org-modules '(org-bbdb
;                      org-gnus
;                      org-drill
;                      org-info
;                      org-jsinfo
;                      org-habit
;                      org-irc
;                      org-mouse
;                      org-protocol
;                      org-annotate-file
;                      org-eval
;                      org-expiry
;                      org-interactive-query
;                      org-man
;                      org-collector
;                      org-panel
;                      org-screen
;                      org-toc))

  (setq org-modules '(
    org-protocol
    org-tempo
    org-capture
))

(eval-after-load 'org
 '(org-load-modules-maybe t))


;; from: https://www.diegoberrocal.com/blog/2015/08/19/org-protocol/
(defadvice org-capture
    (after make-full-window-frame activate)
  "Advise capture to be the only window when used as a popup"
  (if (equal "emacs-capture" (frame-parameter nil 'name))
      (delete-other-windows)))

(defadvice org-capture-finalize
    (after delete-capture-frame activate)
  "Advise capture-finalize to close the frame"
  (if (equal "emacs-capture" (frame-parameter nil 'name))
      (delete-frame)))

;; Start flyspell in org mode buffers
;(add-to-list 'org-mode-hook 'flyspell-mode)

;; FROM: https://yiming.dev/blog/2018/03/02/my-org-refile-workflow/
(defun +org/opened-buffer-files ()
  "Return the list of files currently opened in emacs"
  (delq nil
        (mapcar (lambda (x)
                  (if (and (buffer-file-name x)
                           (string-match "\\.org$"
                                         (buffer-file-name x)))
                      (buffer-file-name x)))
                (buffer-list))))

(setq org-refile-targets '((+org/opened-buffer-files :maxlevel . 4)))

(setq org-refile-use-outline-path 'file)
;; makes org-refile outline working with helm/ivy
(setq org-outline-path-complete-in-steps nil)
(setq org-refile-allow-creating-parent-nodes 'confirm)

(defun +org-search ()
  (interactive)
  (org-refile '(4)))

;;(setq org-refile-use-cache t)
;;
;;(run-with-idle-timer 300 t (lambda ()
;;                            (org-refile-cache-clear)
;;                            (org-refile-get-targets)))
#+end_src
