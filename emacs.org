#+TITLE: Emacs Literate Configuration
#+AUTHOR: Chris Henderson
#+PROPERTY: header-args :tangle yes

* Configuration
:PROPERTIES:
:VISIBILITY: children
:END:

** Table of Contents :TOC_3_gh:
- [[#configuration][Configuration]]
  - [[#about-this-file][About this file]]
  - [[#org-file-tweaks][Org File Tweaks]]
    - [[#automatically-tangle][Automatically Tangle]]
    - [[#visibility-settings][Visibility Settings]]
    - [[#table-of-contents][Table of Contents]]
  - [[#personal-information][Personal Information]]
  - [[#emacs-initialization][Emacs Initialization]]
    - [[#settings][Settings]]
    - [[#package-management][Package Management]]
  - [[#packages][Packages]]
    - [[#evil][Evil]]
    - [[#ivy][Ivy]]
    - [[#counsel][Counsel]]
    - [[#swiper][Swiper]]
    - [[#magit][Magit]]
    - [[#projectile][Projectile]]
    - [[#org][Org]]
    - [[#toc-org][Toc-org]]
  - [[#post-initialization][Post Initialization]]

** Environment

Detect system type

#+BEGIN_SRC emacs-lisp
(defconst *sys/gui*
  (display-graphic-p)
  "Are we running on a GUI Emacs?")

(defconst *sys/windows*
  (eq system-type 'windows-nt)
  "Are we running on a WinTel system?")

(defconst *sys/linux*
  (eq system-type 'gnu/linux)
  "Are we running on a GNU/Linux system?")

(defconst *sys/mac*
  (eq system-type 'darwin)
  "Are we running on a Mac system?")

(defconst *sys/root*
  (string-equal "root" (getenv "USER"))
  "Are you a ROOT user?")
#+END_SRC

** User Settings
*** Personal Information
Let's set some variables with basic user information.

#+BEGIN_SRC emacs-lisp
  (setq user-full-name "Chris Henderson"
        user-mail-address "chenderson623@gmail.com")
#+END_SRC

** Config Defaults

*** Paths
**** Path Functions
#+BEGIN_SRC emacs-lisp
  (defun my-dir-in-directory (dirname parentdir)
    (unless (file-directory-p parentdir)
      (user-error "Parent directory `%s' is not a directory." parentdir))

    (let ((newdir (expand-file-name dirname
                                  (file-truename parentdir))))
        (unless (file-directory-p newdir)
          (make-directory newdir t))
        newdir))

  (defun my-dir-in-data-directory (dirname)
      (my-dir-in-directory dirname *paths/data-emacs*))
#+END_SRC

**** Path Variables

this is built in: (defvar user-emacs-directory "~/.emacs.d/"

#+BEGIN_SRC emacs-lisp
  (defvar *paths/user-home* (getenv "HOME"))

  ;; Base Directories. These can all be overridden earlier
;;  (defvar *paths/data-home* (expand-file-name ".local/share" *paths/user-home*)
;;    "The top directory for third-party shares")
  ;; TODO test this
  (defvar *paths/data-home* (my-dir-in-directory ".local/share" *paths/user-home*)
    "The top directory for third-party shares")
  (defvar *paths/cache-home* (expand-file-name ".cache" *paths/user-home*)
    "The top directory for user cache")
  (defvar *paths/config-home* (expand-file-name ".config" *paths/user-home*)
    "The top directory for user configs")

  ;; Calculated Directories. These can all be overridden earlier
  (defvar *paths/data-emacs* (my-dir-in-directory "emacs" *paths/data-home*)
    "The top directory for third-party shares")

  (defvar *paths/cache-emacs* (expand-file-name "emacs" *paths/cache-home*)
    "Directory for cache files")

  (defvar *paths/personal-data* (my-dir-in-directory ".personal" "~")
    "Directory to store personal data")

  (defvar *paths/elpa-path* (my-dir-in-data-directory (format "elpa-%d.%d"
                                                        emacs-major-version
                                                        emacs-minor-version))
    "The directory to store third party packages from ELPA.")

  (defvar *paths/lib-path* (my-dir-in-data-directory "lib")
    "The directory to store third party packages not from ELPA.")

  (defvar *paths/third-party-bin* (my-dir-in-data-directory "opt")
    "The directory to store third party binary tools.")

  ;; user-emacs subdirectories

  (defvar *paths/emacs-user-config-files-path* (expand-file-name "config" user-emacs-directory)
    "The directory to store misc config files.")

  (defvar *paths/emacs-user-lisp-files-path* (expand-file-name "lisp" user-emacs-directory)
    "The directory to store custom packages.")

  (defvar *paths/emacs-user-packages-path* (expand-file-name "package" user-emacs-directory)
    "The directory to store user packages.")

#+END_SRC

** Core Emacs
*** byte compiling
Disable certain byte compiler warnings to cut down on the noise. This is a personal choice and can be removed
if you would like to see any and all byte compiler warnings.

#+BEGIN_SRC emacs-lisp
  (setq byte-compile-warnings '(not free-vars unresolved noruntime lexical make-local))
#+END_SRC

*** startup hooks
method to test best-possible startup time:
emacs -q --eval='(message "%s" (emacs-init-time))'
Use a hook so the message doesn't get clobbered by other messages.
#+BEGIN_SRC emacs-lisp
  (add-hook 'emacs-startup-hook
            (lambda ()
              (message "Emacs ready in %s with %d garbage collections."
                      (format "%.2f seconds"
                              (float-time
                                (time-subtract after-init-time before-init-time)))
                      gcs-done)))
#+END_SRC

** Package Management
*** bootstrap Straight
[[https://github.com/raxod502/straight.el][Straight.el]] is a next-generation, purely functional package manager for the Emacs
hacker.
#+begin_src emacs-lisp
  (eval-and-compile
    (defvar bootstrap-version)
    (let ((bootstrap-file
          (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
          (bootstrap-version 5))
      (unless (file-exists-p bootstrap-file)
        (with-current-buffer
            (url-retrieve-synchronously
            "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
            'silent 'inhibit-cookies)
          (goto-char (point-max))
          (eval-print-last-sexp)))
      (load bootstrap-file nil 'nomessage)))    
#+end_src

*** package settings
We're going to set the =load-path= ourselves and avoid calling =(package-initilize)= (for
performance reasons) so we need to set =package--init-file-ensured= to true to tell =package.el=
to not automatically call it on our behalf. Additionally we're setting
=package-enable-at-startup= to nil so that packages will not automatically be loaded for us since
=use-package= will be handling that.

#+BEGIN_SRC emacs-lisp
  (eval-and-compile
    (setq load-prefer-newer t
          package-user-dir "~/.emacs.d/straight/build"
          package--init-file-ensured t
          package-enable-at-startup nil)

    (unless (file-directory-p package-user-dir)
      (make-directory package-user-dir t)))
#+END_SRC

**** manually set load path
We're going to set the load path ourselves so that we don't have to call =package-initialize= at
runtime and incur a large performance hit. This load-path will actually be faster than the one
created by =package-initialize= because it appends the elpa packages to the end of the load path.
Otherwise any time a builtin package was required it would have to search all of third party paths
first.

#+BEGIN_SRC emacs-lisp
  (eval-and-compile
    (setq load-path (append load-path (directory-files package-user-dir t "^[^.]" t))))
#+END_SRC

*** Use-Package settings
Tell =use-package= to always defer loading packages unless explicitly told otherwise. This speeds up
initialization significantly as many packages are only loaded later when they are explicitly used.

#+BEGIN_SRC emacs-lisp
  (setq use-package-always-defer t
        use-package-verbose t)
#+END_SRC

*** Straight - integration with use-package

#+begin_src emacs-lisp
  (eval-and-compile
    (setq straight-use-package-by-default t)
    (straight-use-package 'use-package)
    (use-package bind-key)
    (use-package git))
#+end_src

** Packages

*** which-key
https://github.com/justbur/emacs-which-key
#+begin_src emacs-lisp
(use-package which-key
  :init
  (which-key-mode)
  :config
  (which-key-setup-side-window-right-bottom)
  (setq which-key-sort-order 'which-key-key-order-alpha
    which-key-side-window-max-width 0.33
    which-key-idle-delay 0.05)
  :diminish which-key-mode)
#+end_src

*** ivy
#+begin_src emacs-lisp
  (use-package swiper
    :bind (("C-s" . swiper-isearch)
           ("C-r" . swiper-backward)
           ("M-%" . anzu-query-replace))
    )

  (use-package ivy
    :bind ( ("C-x b" . ivy-switch-buffer)))
  (use-package counsel
    :bind (("M-x" . counsel-M-x)
           ("C-h f" . counsel-apropos)
           ("C-x C-f" . counsel-find-file)
           ("C-c u" . counsel-unicode-char)

           ("C-x y" . counsel-yank-pop)
           ("C-x C-r" . counsel-recentf)
           ("C-x r l" . counsel-bookmark)
           ("C-h b" . counsel-descbinds)
           ("C-c k" . counsel-ag)
           ("C-c n" . counsel-fzf)
           )
  )
  (use-package ivy-hydra)
#+end_src

** Theme

#+begin_src emacs-lisp
(use-package solarized-theme
  :ensure t
  :if (display-graphic-p)
  :demand t
  :init
  ;; don't make the fringe stand out from the background
  (setq solarized-distinct-fringe-background nil)
  ;; change the font for some headings and titles
  (setq solarized-use-variable-pitch t)
  ;; make the modeline high contrast
  (setq solarized-high-contrast-mode-line nil)
  ;; use this setting without hi contrast modeline
  (setq x-underline-at-descent-line t)
  ;; Use bolding
  (setq solarized-use-less-bold nil)
  ;; Use more italics
  (setq solarized-use-more-italic t)
  ;; Use colors for indicators such as git:gutter, flycheck and similar
  (setq solarized-emphasize-indicators t)
  ;; Set to nil of you don't want to change size of org-mode headlines (but keep other size-changes)
  (setq solarized-scale-org-headlines t)
  :config
  (load-theme 'solarized-light t))

;;;; Customized Solarized Faces
;;;;;   Solarized Dark
(defun my/solarized-dark ()
  "My customized solarized dark theme"
  ;; for issues with emacs 27 see https://emacs.stackexchange.com/a/52804/11934
  ;; (let ((custom--inhibit-theme-enable nil))
  (interactive)
  (mapc #'disable-theme custom-enabled-themes) ; clear any existing themes
  (load-theme 'solarized-dark t)
  (custom-theme-set-faces
   'solarized-dark

   ;; make bg darker for higher contrast & foreground slightly lighter
   `(default ((t (:foreground "#8f9ea0" :background "#002833"))))

   ;; matching fringe
   `(fringe ((t (:background "#002833" :foreground "#586e75"))))

   ;; fix modeline underline
   `(mode-line ((t (:background "#073642" :foreground "#839496" :box (:line-width 1 :color "#002833" :style unspecified) :overline "#002833" :underline "#002833"))))

   ;; terminal
   `(term ((t (:background "#002833" :foreground "#839496"))))

   ;; org faces
   `(org-block ((t (:foreground "#2E8B57"))))
   `(org-block-begin-line ((t (:foreground "#74a8a4" :weight bold :slant normal))))
   `(org-block-end-line ((t (:foreground "#74a8a4" :weight bold :slant normal))))
   `(org-level-1 ((t (:inherit variable-pitch :foreground "#268bd2" :height 1.5))))
   `(org-level-2 ((t (:inherit variable-pitch :foreground "medium sea green" :height 1.3))))
   `(org-level-3 ((t (:inherit variable-pitch :foreground "#cb4b16" :height 1.2))))
   `(org-level-4 ((t (:inherit variable-pitch :foreground "#6c71c4" :height 1.15))))
   `(org-level-8 ((t (:inherit variable-pitch :foreground "#9e1e86" :height 1.1))))
   `(org-quote ((t (:inherit org-block :slant normal :weight normal))))
   `(org-agenda-date ((t (:background "#002833" :foreground "dark cyan" :inverse-video nil :box (:line-width 5 :color "#002833") :overline nil :underline t :slant normal :weight normal :height 1.5 :family "Avenir Next"))))
   `(org-agenda-date-today ((t (:inherit org-agenda-date :background "#268bd2" :foreground "#002833" :inverse-video t :box nil :overline nil :weight bold))))
   `(org-tag ((t (:inherit font-lock-comment-face :weight bold :height 0.9))))

   ;; markdown faces
   `(markdown-comment-face ((t (:weight normal :slant italic :strike-through nil))))
   `(markdown-header-face-1 ((t (:inherit variable-pitch :foreground "#268bd2" :height 1.75))))
   `(markdown-header-face-2 ((t (:inherit variable-pitch :foreground "medium sea green" :height 1.45))))
   `(markdown-header-face-3 ((t (:inherit variable-pitch :foreground "#cb4b16" :height 1.2))))

   ;; ivy faces
   `(ivy-confirm-face ((t (:foreground "#859900"))))
   `(ivy-current-match ((t (:weight bold :foreground "goldenrod1" :background "#1f4a54" :underline nil))))
   `(ivy-match-required-face ((t (:foreground "#dc322f"))))
   `(ivy-minibuffer-match-face-1 ((t (:foreground "#8f9ea0"))))
   `(ivy-minibuffer-match-face-2 ((t (:foreground "goldenrod1"))))
   `(ivy-minibuffer-match-face-3 ((t (:foreground "goldenrod1"))))
   `(ivy-minibuffer-match-face-4 ((t (:foreground "goldenrod1"))))
   `(ivy-remote ((t (:foreground "#268bd2"))))
   `(swiper-line-face ((t (:weight bold :background "#1f4a54" :underline nil))))
   `(swiper-match-face-1 ((t (:foreground "#8f9ea0"))))
   `(swiper-match-face-2 ((t (:foreground "goldenrod1"))))
   `(swiper-match-face-3 ((t (:foreground "goldenrod1"))))
   `(swiper-match-face-4 ((t (:foreground "goldenrod1"))))

   ;; posframe faces
   `(hydra-posframe-face ((t (:background "#073642"))))
   `(ivy-posframe ((t (:background "#073642"))))
   `(which-key-posframe ((t (:background "#073642"))))
   `(helm-posframe-face ((t (:background "#073642"))))
   `(frog-menu-posframe-background-face ((t (:background "#073642"))))

   ;; helm faces
   `(helm-selection ((t (:background "#1f4a54" :foreground "goldenrod1" :underline nil))))
   `(helm-match ((t (:foreground "#b58900"))))

   ;; line number highlighting
   `(line-number-current-line ((t (:inherit default :foreground "goldenrod1"))))
   ;; '(nlinum-current-line ((t (:inherit default :foreground "goldenrod1"))))
   `(linum-highlight-face ((t (:inherit default :foreground "goldenrod1"))))
   ;; '(nlinum-hl-face ((t (:inherit default :foreground "goldenrod1"))))

   ;; battery faces
   `(fancy-battery-charging ((t (:foreground "dark blue" :weight bold))))
   `(fancy-battery-critical ((t (:foreground "dark red" :weight bold))))
   `(fancy-battery-discharging ((t (:foreground "dark magenta" :weight bold))))))

;;;;;   Solarized Light
(defun my/solarized-light ()
  "My customized solarized-light theme"
  (interactive)
  (mapc #'disable-theme custom-enabled-themes) ; clear any existing themes
  (load-theme 'solarized-light t)
  ;; for issues with emacs 27 see https://emacs.stackexchange.com/a/52804/11934
  ;; (let ((custom--inhibit-theme-enable nil))
  (custom-theme-set-faces
   'solarized-light
   ;; increase text contrast
   ;; `(default ((t (:background "#fdf6e3" :foreground "#727e80"))))
   `(default ((t (:background "#fdf6e3" :foreground "#667173"))))

   ;; fix modeline underline
   `(mode-line ((t (:background "#eee8d5" :foreground "#657b83" :box (:line-width 1 :color "#fdf6e3" :style unspecified) :overline "#fdf6e3" :underline "#fdf6e3"))))
   ;; org faces
   `(org-block ((t (:foreground "#2E8B57"))))
   `(org-block-begin-line ((t (:foreground "#74a8a4" :weight bold :slant normal))))
   `(org-block-end-line ((t (:foreground "#74a8a4" :weight bold :slant normal))))
   `(org-level-1 ((t (:inherit variable-pitch :foreground "#268bd2" :height 1.3))))
   `(org-level-2 ((t (:inherit variable-pitch :foreground "medium sea green" :height 1.2))))
   `(org-level-3 ((t (:inherit variable-pitch :foreground "#cb4b16" :height 1.15))))
   `(org-level-4 ((t (:inherit variable-pitch :foreground "#6c71c4" :height 1.15))))
   `(org-level-8 ((t (:inherit variable-pitch :foreground "#9e1e86" :height 1.1))))
   `(org-quote ((t (:inherit org-block :slant normal :weight normal))))
   `(org-agenda-date ((t (:background "#fdf6e3" :foreground "dark cyan" :inverse-video nil :box (:line-width 5 :color "#002833") :overline nil :underline t :slant normal :weight normal :height 1.5 :family "Avenir Next"))))
   `(org-agenda-date-today ((t (:inherit org-agenda-date :background "#268bd2" :foreground "#fdf6e3" :inverse-video t :box nil :overline nil :weight bold))))
   `(org-tag ((t (:inherit font-lock-comment-face :weight bold :height 0.9))))

   ;; markdown faces
   `(markdown-comment-face ((t (:weight normal :slant italic :strike-through nil))))
   `(markdown-header-face-1 ((t (:inherit variable-pitch :foreground "#268bd2" :height 1.75))))
   `(markdown-header-face-2 ((t (:inherit variable-pitch :foreground "medium sea green" :height 1.45))))
   `(markdown-header-face-3 ((t (:inherit variable-pitch :foreground "#cb4b16" :height 1.2))))

   ;; ivy faces
   `(ivy-confirm-face ((t (:foreground "#859900"))))
   `(ivy-current-match ((t (:weight bold :foreground "#268bd2" :background "#fdf6e3" :underline nil))))
   `(ivy-match-required-face ((t (:foreground "#dc322f"))))
   `(ivy-minibuffer-match-face-1 ((t (:foreground "#64b5ea"))))
   `(ivy-minibuffer-match-face-2 ((t (:foreground "#64b5ea"))))
   `(ivy-minibuffer-match-face-3 ((t (:foreground "#64b5ea"))))
   `(ivy-minibuffer-match-face-4 ((t (:foreground "#64b5ea"))))
   `(ivy-remote ((t (:foreground "#268bd2"))))
   `(swiper-line-face ((t (:weight bold :background "#fdf6e3" :underline nil))))
   `(swiper-match-face-1 ((t (:foreground "#64b5ea"))))
   `(swiper-match-face-2 ((t (:foreground "#64b5ea"))))
   `(swiper-match-face-3 ((t (:foreground "#64b5ea"))))
   `(swiper-match-face-4 ((t (:foreground "#64b5ea"))))

   ;; posframe faces
   `(hydra-posframe-face ((t (:background "#eee8d5"))))
   `(ivy-posframe ((t (:background "#eee8d5"))))
   `(which-key-posframe ((t (:background "#eee8d5"))))
   `(helm-posframe ((t (:background "#eee8d5"))))
   `(frog-menu-posframe-background-face ((t (:background "#eee8d5"))))

   ;; helm faces
   `(helm-selection ((t (:background "#fdf6e3" :foreground "#268bd2" :underline nil :weight bold))))
   `(helm-match ((t (:foreground "#cb4b16" :weight bold))))

   ;; '(helm-selection ((t (:foreground "#f7f438" :background "#64b5ea" :underline nil :weight bold))))
   ;; line size
   `(set-face-attribute 'linum nil :inherit 'fixed-pitch)
   ;; line highlighting
   `(linum-highlight-face ((t (:inherit default :foreground "#002b36"))))
   ;; '(nlinum-hl-face ((t (:inherit default :foreground "#002b36"))))
   `(line-number-current-line ((t (:inherit default :foreground "#002b36"))))
   ;; '(nlinum-current-line ((t (:inherit default :foreground "#002b36"))))
   ;; battery faces
   `(fancy-battery-charging ((t (:foreground "dark blue" :weight bold))))
   `(fancy-battery-critical ((t (:foreground "dark red" :weight bold))))
   `(fancy-battery-discharging ((t (:foreground "dark magenta" :weight bold))))))
#+end_src

Use solarized light
#+begin_src emacs-lisp
  (my/solarized-light)
#+end_src


